{"map":"{\"version\":3,\"sources\":[\"webpack/universalModuleDefinition\",\"webpack/bootstrap\",\"C:\\\\Users\\\\The82\\\\Desktop\\\\RD-Visual\\\\RD-Visual\\\\src\\\\SMScreen.js\",\"C:\\\\Users\\\\The82\\\\Desktop\\\\RD-Visual\\\\RD-Visual\\\\src\\\\ScreenMap.js\"],\"names\":[\"root\",\"factory\",\"exports\",\"module\",\"define\",\"amd\",\"window\",\"installedModules\",\"__webpack_require__\",\"moduleId\",\"i\",\"l\",\"modules\",\"call\",\"m\",\"c\",\"d\",\"name\",\"getter\",\"o\",\"Object\",\"defineProperty\",\"enumerable\",\"get\",\"r\",\"Symbol\",\"toStringTag\",\"value\",\"t\",\"mode\",\"__esModule\",\"ns\",\"create\",\"key\",\"bind\",\"n\",\"object\",\"property\",\"prototype\",\"hasOwnProperty\",\"p\",\"s\",\"SMScreen\",\"[object Object]\",\"Canvas\",\"IniRes\",\"ID\",\"this\",\"Blit\",\"bctx\",\"ctx\",\"offscreen_data\",\"getImageData\",\"XResolution\",\"YResolution\",\"putImageData\",\"Res\",\"Array\",\"DOMArray\",\"RenderFlag\",\"RenderRate\",\"BackgroundImages\",\"eooFlag\",\"getContext\",\"RenderSpeed\",\"Count\",\"console\",\"log\",\"SetTextWidth\",\"Width\",\"TextWidth\",\"SetLineHeight\",\"Height\",\"LineHeight\",\"Resolution\",\"length\",\"DOM\",\"Render\",\"Flag\",\"GetID\",\"Number\",\"GetRenderSpeed\",\"GetRenderState\",\"Boolean\",\"Origin\",\"Dimensions\",\"Image\",\"Type\",\"Font\",\"FillStyle\",\"Text\",\"Item\",\"dimensions\",\"fillstyle\",\"font\",\"image\",\"origin\",\"type\",\"text\",\"push\",\"drawImage\",\"fillStyle\",\"WrapText\",\"PageDimensions\",\"WindowDimensions\",\"save\",\"ratiox\",\"ratioy\",\"toFixed\",\"scale\",\"restore\",\"clearRect\",\"context\",\"x\",\"y\",\"maxWidth\",\"lineHeight\",\"words\",\"split\",\"line\",\"testLine\",\"measureText\",\"width\",\"fillText\",\"textAlign\",\"__webpack_exports__\",\"ScreenMap_ScreenMap\",\"CVChannels\",\"GlobalXResolution\",\"GlobalYResolution\",\"ZoomLevel\",\"WindowHeight\",\"innerHeight\",\"WindowWidth\",\"innerWidth\",\"Channels\",\"Screens\",\"GlobalRefreshLimit\",\"CycleCount\",\"Init\",\"SetGlobalResolution\",\"Pair\",\"RenderDOM\",\"oddeven\",\"ctxArray\",\"bctxArray\"],\"mappings\":\"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\",\"sourcesContent\":[\"(function webpackUniversalModuleDefinition(root, factory) {\\n\\tif(typeof exports === 'object' && typeof module === 'object')\\n\\t\\tmodule.exports = factory();\\n\\telse if(typeof define === 'function' && define.amd)\\n\\t\\tdefine(\\\"ScreenMap\\\", [], factory);\\n\\telse if(typeof exports === 'object')\\n\\t\\texports[\\\"ScreenMap\\\"] = factory();\\n\\telse\\n\\t\\troot[\\\"ScreenMap\\\"] = factory();\\n})(window, function() {\\nreturn \",\" \\t// The module cache\\n \\tvar installedModules = {};\\n\\n \\t// The require function\\n \\tfunction __webpack_require__(moduleId) {\\n\\n \\t\\t// Check if module is in cache\\n \\t\\tif(installedModules[moduleId]) {\\n \\t\\t\\treturn installedModules[moduleId].exports;\\n \\t\\t}\\n \\t\\t// Create a new module (and put it into the cache)\\n \\t\\tvar module = installedModules[moduleId] = {\\n \\t\\t\\ti: moduleId,\\n \\t\\t\\tl: false,\\n \\t\\t\\texports: {}\\n \\t\\t};\\n\\n \\t\\t// Execute the module function\\n \\t\\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\\n\\n \\t\\t// Flag the module as loaded\\n \\t\\tmodule.l = true;\\n\\n \\t\\t// Return the exports of the module\\n \\t\\treturn module.exports;\\n \\t}\\n\\n\\n \\t// expose the modules object (__webpack_modules__)\\n \\t__webpack_require__.m = modules;\\n\\n \\t// expose the module cache\\n \\t__webpack_require__.c = installedModules;\\n\\n \\t// define getter function for harmony exports\\n \\t__webpack_require__.d = function(exports, name, getter) {\\n \\t\\tif(!__webpack_require__.o(exports, name)) {\\n \\t\\t\\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\\n \\t\\t}\\n \\t};\\n\\n \\t// define __esModule on exports\\n \\t__webpack_require__.r = function(exports) {\\n \\t\\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\\n \\t\\t\\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\\n \\t\\t}\\n \\t\\tObject.defineProperty(exports, '__esModule', { value: true });\\n \\t};\\n\\n \\t// create a fake namespace object\\n \\t// mode & 1: value is a module id, require it\\n \\t// mode & 2: merge all properties of value into the ns\\n \\t// mode & 4: return value when already ns object\\n \\t// mode & 8|1: behave like require\\n \\t__webpack_require__.t = function(value, mode) {\\n \\t\\tif(mode & 1) value = __webpack_require__(value);\\n \\t\\tif(mode & 8) return value;\\n \\t\\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\\n \\t\\tvar ns = Object.create(null);\\n \\t\\t__webpack_require__.r(ns);\\n \\t\\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\\n \\t\\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\\n \\t\\treturn ns;\\n \\t};\\n\\n \\t// getDefaultExport function for compatibility with non-harmony modules\\n \\t__webpack_require__.n = function(module) {\\n \\t\\tvar getter = module && module.__esModule ?\\n \\t\\t\\tfunction getDefault() { return module['default']; } :\\n \\t\\t\\tfunction getModuleExports() { return module; };\\n \\t\\t__webpack_require__.d(getter, 'a', getter);\\n \\t\\treturn getter;\\n \\t};\\n\\n \\t// Object.prototype.hasOwnProperty.call\\n \\t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\\n\\n \\t// __webpack_public_path__\\n \\t__webpack_require__.p = \\\"\\\";\\n\\n\\n \\t// Load entry module and return exports\\n \\treturn __webpack_require__(__webpack_require__.s = 0);\\n\",\"/*----------------------------------------------------------------------------------------------------------\\r\\n::“Copyright 2018 Clayton Burnett”\\r\\n::This program is distributed under the terms of the GNU General Public License\\r\\n------------------------------------------------------------------------------------------------------------*/\\r\\n/**\\r\\n * @fileOverview\\r\\n *\\r\\n * This file contains the main abstraction for a single screen\\r\\n *\\r\\n * @author Clayton Burnett <the82professional@hotmail.com>\\r\\n */\\r\\n/**\\r\\n * ###############################################################################################################\\r\\n *                                              SMScreen\\r\\n */\\r\\n/**\\r\\n * @class\\r\\n * Class modeling a canvas screen\\r\\n *\\r\\n * @description\\r\\n * A screen is modeled as a pair of blitting canvas elements\\r\\n **/\\r\\n/**\\r\\n* @constructor\\r\\n*/\\r\\nexport class SMScreen {\\r\\n    constructor(Canvas, IniRes, ID) {\\r\\n        this.Canvas = Canvas;\\r\\n        this.IniRes = IniRes;\\r\\n        this.ID = ID;\\r\\n        /**\\r\\n        * Function to flip the displayed screens by swapping video buffer\\r\\n        */\\r\\n        this.Blit = function () {\\r\\n            if (this.bctx && this.ctx) {\\r\\n                var offscreen_data = this.bctx.getImageData(0, 0, this.XResolution, this.YResolution);\\r\\n                this.ctx.putImageData(offscreen_data, 0, 0);\\r\\n            }\\r\\n        };\\r\\n        //Default Constructor\\r\\n        this.Res = IniRes || new Array(100, 100);\\r\\n        this.DOMArray = new Array();\\r\\n        this.ID = ID || 0;\\r\\n        this.RenderFlag = true;\\r\\n        this.RenderRate = 0; //Used internally to calculate refresh\\r\\n        this.BackgroundImages = new Array(); //The Current array of background Images\\r\\n        this.eooFlag = true;\\r\\n        if (Canvas) {\\r\\n            for (let i of Canvas) {\\r\\n                if (this.eooFlag == true) {\\r\\n                    this.ctx = i.getContext('2d');\\r\\n                    this.eooFlag = false;\\r\\n                }\\r\\n                else {\\r\\n                    this.bctx = i.getContext('2d');\\r\\n                    this.eooFlag = true;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    //-------------------------------------------------------------SET METHODS---------------------------\\r\\n    /**\\r\\n    * Set the element screen resolution\\r\\n    * @param {Integer} Count Sets the current render count\\r\\n    */\\r\\n    set RenderSpeed(Count) {\\r\\n        if (Count) {\\r\\n            this.RenderRate = Count;\\r\\n        }\\r\\n        else {\\r\\n            console.log(\\\"Cannot set the render rate to: \\\" + Count);\\r\\n        }\\r\\n    }\\r\\n    /**\\r\\n    * Set the text width\\r\\n    * @param {Integer} Width Sets the text width to apply to created text elements\\r\\n    */\\r\\n    set SetTextWidth(Width) {\\r\\n        if (Width) {\\r\\n            this.TextWidth = Width;\\r\\n        }\\r\\n        else {\\r\\n            console.log(\\\"Text width not defined in SetTextWidth(Try using an integer value)\\\");\\r\\n        }\\r\\n    }\\r\\n    /**\\r\\n    * Set the line height\\r\\n    * @param {Integer} Height Sets the default line height to be applied to text elements\\r\\n    */\\r\\n    set SetLineHeight(Height) {\\r\\n        if (Height) {\\r\\n            this.LineHeight = Height;\\r\\n        }\\r\\n        else {\\r\\n            console.log(\\\"Line height not defined in SetLineHeight(Try using an integer value)\\\");\\r\\n        }\\r\\n    }\\r\\n    /**\\r\\n    * Set the element screen resolution\\r\\n    * @param {Integer[]} Resolution Sets the resolution of the canvas element\\r\\n    */\\r\\n    set Resolution(Resolution) {\\r\\n        if (Resolution.length == 2) {\\r\\n            this.Res = Resolution;\\r\\n        }\\r\\n        else {\\r\\n            console.log(\\\"Cannot set screen\\\" + this.ID + \\\"to resolution\\\" + Resolution + \\\"requires x/y integer array\\\");\\r\\n        }\\r\\n    }\\r\\n    /**\\r\\n    * Set Timeout\\r\\n    * @param {Array[]} DOMArray Updates the screen DOM\\r\\n    */\\r\\n    set DOM(DOMArray) {\\r\\n        this.DOMArray = DOMArray;\\r\\n    }\\r\\n    /**\\r\\n    * Sets whether to render this screen during the screenmap render cycle\\r\\n    * @param {Boolean} Flag A boolean value indicating either true(Render) or false(do not render)\\r\\n    */\\r\\n    set Render(Flag) {\\r\\n        if (Flag) {\\r\\n            this.RenderFlag = Flag;\\r\\n        }\\r\\n        else {\\r\\n            console.log(\\\"Render must be either true or false\\\");\\r\\n        }\\r\\n    }\\r\\n    //----------------------------------------------------------GET METHODS-------------------------------\\r\\n    /**\\r\\n    * Gets the unique screen ID\\r\\n    * @returns {Number} The unique screen ID\\r\\n    */\\r\\n    get GetID() {\\r\\n        return (Number(this.ID));\\r\\n    }\\r\\n    /**\\r\\n    * Gets the current render count\\r\\n    * @returns {Number} The current render count\\r\\n    */\\r\\n    get GetRenderSpeed() {\\r\\n        return (Number(this.RenderRate));\\r\\n    }\\r\\n    /**\\r\\n    * Gets the current render count\\r\\n    * @returns {Boolean} The current render state(true:on, false:off)\\r\\n    */\\r\\n    get GetRenderState() {\\r\\n        return (Boolean(this.RenderFlag));\\r\\n    }\\r\\n    //-----------------------------------------------------------PUBLIC INTERFACE---------------------------------\\r\\n    /**\\r\\n    * Function to add an item to the render DOM\\r\\n    * @param {number[]} Origin Origin x/y of the upper left corner of the drawable\\r\\n    * @param {number[]} Dimensions where to draw the sprite in an x/y number array\\r\\n    * @param {string} Image Name of the sprite to use\\r\\n    * @param {string} Type type of the sprite to use(Sprite|Text|Background)\\r\\n    */\\r\\n    Draw(Origin, Dimensions, Image, Type, Font, FillStyle, Text) {\\r\\n        //this.bctx.drawImage(Sprite, xcord, ycord, width, height);\\r\\n        let Item;\\r\\n        Item.dimensions = Dimensions;\\r\\n        Item.fillstyle = FillStyle;\\r\\n        Item.font = Font;\\r\\n        Item.image = Image;\\r\\n        Item.origin = Origin;\\r\\n        Item.type = Type;\\r\\n        Item.text = Text;\\r\\n        this.DOMArray.push(Item);\\r\\n    }\\r\\n    /**\\r\\n    * Function to render the map to the background canvas and blit\\r\\n    */\\r\\n    RenderDOM() {\\r\\n        //Render Backgrounds First\\r\\n        for (let i of this.DOMArray) {\\r\\n            if (i.type == \\\"Background\\\") {\\r\\n                //0=Image 1=Origin 2=Dimensions 3=Type\\r\\n                this.bctx.drawImage(i.image, i.origin[0], i.origin[1], i.dimensions[0], i.dimensions[1]);\\r\\n            }\\r\\n        }\\r\\n        //Render Sprites Next\\r\\n        for (let i of this.DOMArray) {\\r\\n            if (i[3] == \\\"Sprite\\\") {\\r\\n                //0=Image 1=Origin 2=Dimensions 3=Type\\r\\n                this.bctx.drawImage(i.image, i.origin[0], i.origin[1], i.dimensions[0], i.dimensions[1]);\\r\\n            }\\r\\n        }\\r\\n        //Render Text Last\\r\\n        for (let i of this.DOMArray) {\\r\\n            if (i[3] == \\\"Text\\\") {\\r\\n                this.bctx.fillStyle = i.fillstyle;\\r\\n                this.bctx.font = i.font;\\r\\n                this.ctx.fillStyle = i.fillstyle;\\r\\n                this.ctx.font = i.font;\\r\\n                this.WrapText(this.bctx, i.text, i.origin[0], i.origin[1], this.TextWidth, this.LineHeight);\\r\\n            }\\r\\n        }\\r\\n        //Refresh the screen\\r\\n        this.Blit();\\r\\n    }\\r\\n    //-----------------------------------------------------------INTERNAL METHODS----------------------------------   \\r\\n    /**\\r\\n    * Function to resize the canvas and zoom elements to fit the window maintains aspect ratio\\r\\n    * @param {Array} PageDimensions Array of XY corresponding to the pages native pixel dimensions\\r\\n    * @param {Array} WindowDimensions Array of XY corresponding to the current window dimensions\\r\\n    */\\r\\n    ScaleCanvas(PageDimensions, WindowDimensions) {\\r\\n        //------------------------------------------------------FULL SCREEN MODE ONLY SO FAR-------------------------\\t\\r\\n        //Save the canvas before performing transformation\\r\\n        this.ctx.save();\\r\\n        this.bctx.save();\\r\\n        //if the upper left is 0,0\\r\\n        var ratiox = (WindowDimensions[0] * 100) / PageDimensions[0]; //WindowDimensions[0] - PageDimensions[0];\\r\\n        var ratioy = (WindowDimensions[1] * 100) / PageDimensions[1];\\r\\n        ratioy = +ratioy.toFixed(2);\\r\\n        ratiox = +ratiox.toFixed(2);\\r\\n        ratioy = ratioy / 100;\\r\\n        ratiox = 75.57 / 100;\\r\\n        //if were not scaled correctly\\t\\r\\n        if (ratiox != 100 || ratioy != 100) {\\r\\n            this.ctx.scale(.50, .50);\\r\\n            this.bctx.scale(.50, .50);\\r\\n        }\\r\\n        this.ctx.restore();\\r\\n        this.bctx.restore();\\r\\n        //--------------Implement a write text to screen function that can dynamically change the font position or size\\r\\n    }\\r\\n    /**\\r\\n    * Clears the current screen (not needed with blitting)\\r\\n    */\\r\\n    Clear() {\\r\\n        //--------------------------------------!!WARNING DEBUG MODE-------------------------------------------------------\\r\\n        //Clear does not properly clear the defined resolution using the single command below\\r\\n        //this.bctx.clearRect(0, 0, this.XResolution, this.YResolution);\\r\\n        this.bctx.clearRect(0, 0, 3000, 3000);\\r\\n    }\\r\\n    /**\\r\\n    * Function to wrap the loaded text\\r\\n    * @param {CanvasContext} context the current Canvas context to display to\\r\\n    * @param {String} text The text to display within the DOM element\\r\\n    * @param {Integer} x The starting x position in pixels\\r\\n    * @param {Integer} y The starting y position in pixels\\r\\n    * @param {Integer} maxWidth The maximum width to use before wrap\\r\\n    * @param {Integer} lineHeight The height of the display text\\r\\n    */\\r\\n    WrapText(context, text, x, y, maxWidth, lineHeight) {\\r\\n        var words = text.split(' ');\\r\\n        var line = '';\\r\\n        for (var n = 0; n < words.length; n++) {\\r\\n            var testLine = line + words[n] + ' ';\\r\\n            var metrics = context.measureText(testLine);\\r\\n            var testWidth = metrics.width;\\r\\n            if (testWidth > maxWidth && n > 0) {\\r\\n                context.fillText(line, x, y);\\r\\n                line = words[n] + ' ';\\r\\n                y += lineHeight;\\r\\n            }\\r\\n            else {\\r\\n                line = testLine;\\r\\n            }\\r\\n        }\\r\\n        context.textAlign = \\\"start\\\";\\r\\n        context.fillText(line, x, y);\\r\\n    }\\r\\n}\\r\\n\",\"/*----------------------------------------------------------------------------------------------------------\\r\\n::“Copyright 2018 Clayton Burnett”\\r\\n::This program is distributed under the terms of the GNU General Public License\\r\\n------------------------------------------------------------------------------------------------------------*/\\r\\n/**\\r\\n * @fileOverview\\r\\n *\\r\\n * This file contains the implementation for the Canvas controller\\r\\n *\\r\\n * @author Clayton Burnett <the82professional@hotmail.com>\\r\\n */\\r\\n/**\\r\\n * ###############################################################################################################\\r\\n *                                              ScreenMap\\r\\n */\\r\\n/**\\r\\n * @class\\r\\n * Class modeling a Multi-Canvas controller\\r\\n *\\r\\n * @description\\r\\n * This is the canvas manager. When passing in canvas DOM elements pass them in the order: front1, back1, front2, back2 etc.\\r\\n * The rear rear canvas element will be written to and then \\\"blitted\\\" to the front canvas.\\r\\n **/\\r\\nimport { SMScreen } from './SMScreen';\\r\\n/**\\r\\n* @constructor\\r\\n*/\\r\\nexport class ScreenMap {\\r\\n    constructor(CVChannels) {\\r\\n        this.GlobalXResolution = 0; //Screen resolution X value in integer format\\r\\n        this.GlobalYResolution = 0; //Screen resolution Y value in integer format\\r\\n        this.ZoomLevel = 1; //Current screen magnification level \\r\\n        this.WindowHeight = window.innerHeight;\\r\\n        this.WindowWidth = window.innerWidth;\\r\\n        this.Channels = CVChannels;\\r\\n        this.Screens = [];\\r\\n        this.GlobalRefreshLimit = 60;\\r\\n        this.CycleCount = 0;\\r\\n        //Run on init function\\r\\n        this.Init();\\r\\n    }\\r\\n    //----------------------------------------------SET METHODS--------------------------------------------------\\r\\n    /**\\r\\n    * Sets the default global canvas resolution for all managed canvases\\r\\n    * @param {Integer[]} Pair An instance of a x[0] and y[1] integer array indicating a resolution\\r\\n    */\\r\\n    set SetGlobalResolution(Pair) {\\r\\n        if (Pair && Pair.length > 1) {\\r\\n            this.GlobalXResolution = Pair[0];\\r\\n            this.GlobalYResolution = Pair[1];\\r\\n        }\\r\\n    }\\r\\n    //----------------------------------------------GET METHODS(NONE)-------------------------------------------------\\r\\n    //----------------------------------------------PUBLIC INTERFACE--------------------------------------------------\\r\\n    /**\\r\\n    * Internal function that is run each render cycle\\r\\n    */\\r\\n    RenderCycle() {\\r\\n        if (this.CycleCount < this.GlobalRefreshLimit) {\\r\\n            this.CycleCount++; //Increment the cycle counter\\r\\n            //Run screen updates\\r\\n            for (let i of this.Screens) {\\r\\n                if (i.GetRenderSpeed <= this.CycleCount && i.GetRenderState == true) {\\r\\n                    i.RenderDOM();\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        else {\\r\\n            //Reset the cycle counter\\r\\n            this.CycleCount = 0;\\r\\n        }\\r\\n    }\\r\\n    //----------------------------------------------PRIVATE MEMBER FUNCTIONS------------------------------------------\\r\\n    /**\\r\\n    * private ScreenMap initialization function, does not take parameters\\r\\n    */\\r\\n    Init() {\\r\\n        //Create Screen objects for each pair\\r\\n        let oddeven = 0;\\r\\n        let ctxArray = new Array();\\r\\n        let bctxArray = new Array();\\r\\n        //Split up the channels\\r\\n        for (let i of this.Channels) {\\r\\n            if (oddeven == 0) {\\r\\n                ctxArray.push(i);\\r\\n                oddeven = 1;\\r\\n            }\\r\\n            else {\\r\\n                bctxArray.push(i);\\r\\n                oddeven = 0;\\r\\n            }\\r\\n        }\\r\\n        for (let i in ctxArray) {\\r\\n            this.Screens.push(new SMScreen([ctxArray[i], bctxArray[i]], [100, 100], Number(i)));\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"]}","code":"!function(e,t){\"object\"==typeof exports&&\"object\"==typeof module?module.exports=t():\"function\"==typeof define&&define.amd?define(\"ScreenMap\",[],t):\"object\"==typeof exports?exports.ScreenMap=t():e.ScreenMap=t()}(window,function(){return function(e){var t={};function i(n){if(t[n])return t[n].exports;var r=t[n]={i:n,l:!1,exports:{}};return e[n].call(r.exports,r,r.exports,i),r.l=!0,r.exports}return i.m=e,i.c=t,i.d=function(e,t,n){i.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},i.r=function(e){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(e,\"__esModule\",{value:!0})},i.t=function(e,t){if(1&t&&(e=i(e)),8&t)return e;if(4&t&&\"object\"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(i.r(n),Object.defineProperty(n,\"default\",{enumerable:!0,value:e}),2&t&&\"string\"!=typeof e)for(var r in e)i.d(n,r,function(t){return e[t]}.bind(null,r));return n},i.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return i.d(t,\"a\",t),t},i.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},i.p=\"\",i(i.s=0)}([function(e,t,i){\"use strict\";i.r(t);class n{constructor(e,t,i){if(this.Canvas=e,this.IniRes=t,this.ID=i,this.Blit=function(){if(this.bctx&&this.ctx){var e=this.bctx.getImageData(0,0,this.XResolution,this.YResolution);this.ctx.putImageData(e,0,0)}},this.Res=t||new Array(100,100),this.DOMArray=new Array,this.ID=i||0,this.RenderFlag=!0,this.RenderRate=0,this.BackgroundImages=new Array,this.eooFlag=!0,e)for(let t of e)1==this.eooFlag?(this.ctx=t.getContext(\"2d\"),this.eooFlag=!1):(this.bctx=t.getContext(\"2d\"),this.eooFlag=!0)}set RenderSpeed(e){e?this.RenderRate=e:console.log(\"Cannot set the render rate to: \"+e)}set SetTextWidth(e){e?this.TextWidth=e:console.log(\"Text width not defined in SetTextWidth(Try using an integer value)\")}set SetLineHeight(e){e?this.LineHeight=e:console.log(\"Line height not defined in SetLineHeight(Try using an integer value)\")}set Resolution(e){2==e.length?this.Res=e:console.log(\"Cannot set screen\"+this.ID+\"to resolution\"+e+\"requires x/y integer array\")}set DOM(e){this.DOMArray=e}set Render(e){e?this.RenderFlag=e:console.log(\"Render must be either true or false\")}get GetID(){return Number(this.ID)}get GetRenderSpeed(){return Number(this.RenderRate)}get GetRenderState(){return Boolean(this.RenderFlag)}Draw(e,t,i,n,r,o,s){let l;l.dimensions=t,l.fillstyle=o,l.font=r,l.image=i,l.origin=e,l.type=n,l.text=s,this.DOMArray.push(l)}RenderDOM(){for(let e of this.DOMArray)\"Background\"==e.type&&this.bctx.drawImage(e.image,e.origin[0],e.origin[1],e.dimensions[0],e.dimensions[1]);for(let e of this.DOMArray)\"Sprite\"==e[3]&&this.bctx.drawImage(e.image,e.origin[0],e.origin[1],e.dimensions[0],e.dimensions[1]);for(let e of this.DOMArray)\"Text\"==e[3]&&(this.bctx.fillStyle=e.fillstyle,this.bctx.font=e.font,this.ctx.fillStyle=e.fillstyle,this.ctx.font=e.font,this.WrapText(this.bctx,e.text,e.origin[0],e.origin[1],this.TextWidth,this.LineHeight));this.Blit()}ScaleCanvas(e,t){this.ctx.save(),this.bctx.save();var i=100*t[0]/e[0],n=100*t[1]/e[1];n=+n.toFixed(2),i=+i.toFixed(2),n/=100,100==(i=75.57/100)&&100==n||(this.ctx.scale(.5,.5),this.bctx.scale(.5,.5)),this.ctx.restore(),this.bctx.restore()}Clear(){this.bctx.clearRect(0,0,3e3,3e3)}WrapText(e,t,i,n,r,o){for(var s=t.split(\" \"),l=\"\",a=0;a<s.length;a++){var h=l+s[a]+\" \";e.measureText(h).width>r&&a>0?(e.fillText(l,i,n),l=s[a]+\" \",n+=o):l=h}e.textAlign=\"start\",e.fillText(l,i,n)}}i.d(t,\"ScreenMap\",function(){return r});class r{constructor(e){this.GlobalXResolution=0,this.GlobalYResolution=0,this.ZoomLevel=1,this.WindowHeight=window.innerHeight,this.WindowWidth=window.innerWidth,this.Channels=e,this.Screens=[],this.GlobalRefreshLimit=60,this.CycleCount=0,this.Init()}set SetGlobalResolution(e){e&&e.length>1&&(this.GlobalXResolution=e[0],this.GlobalYResolution=e[1])}RenderCycle(){if(this.CycleCount<this.GlobalRefreshLimit){this.CycleCount++;for(let e of this.Screens)e.GetRenderSpeed<=this.CycleCount&&1==e.GetRenderState&&e.RenderDOM()}else this.CycleCount=0}Init(){let e=0,t=new Array,i=new Array;for(let n of this.Channels)0==e?(t.push(n),e=1):(i.push(n),e=0);for(let e in t)this.Screens.push(new n([t[e],i[e]],[100,100],Number(e)))}}}])});","extractedComments":[]}